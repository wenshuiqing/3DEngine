@startuml


Main --> IApplication
class Main{

}


interface IRuntimeModule{
    + virtual int Init() = 0
	+ virtual void Destroy() = 0
	+ virtual void Update() = 0
}

IRuntimeModule <|.. IApplication
IApplication --> GfxConfiguration
interface IApplication{
    virtual int Init() = 0
	virtual void Destroy() = 0
	virtual void Update() = 0
	virtual bool IsQuit() = 0
    ==
	virtual GfxConfiguration& GetConfiguration() = 0
		
}

ImageParse ..> Buffer
ImageParse ..> Image
interface ImageParse{
    virtual Parser(const Buffer& buf)
}

IApplication <|.. BaseApplication

BaseApplication *-- MemoryManager
BaseApplication *-- InputManager
BaseApplication *-- GraphicsManager
BaseApplication *-- AssetLoader
BaseApplication *-- SceneManager

class BaseApplication{
    --construcor--
    + BaseApplication(GfxConfiguration& cfg)
    -- functions--
	+ virtual int Init()
	+ virtual void Destroy()
	+ virtual void Update()
	+ virtual bool IsQuit()
	+ inline GfxConfiguration& GetConfiguration()
	+ virtual int LoadScene()
	# virtual void OnDraw()
	# static bool m_bQuit
	# GfxConfiguration m_Config
}

IRuntimeModule <|.. GraphicsManager
GraphicsManager --> SceneManager
class GraphicsManager{
    virtual int Init()
    virtual void Destroy()
    virtual void Update()

	# bool SetPerFrameShaderParameters()
	# bool SetPerBatchShaderParameters(const char* paramName, const Matrix4X4f& param)
	# bool SetPerBatchShaderParameters(const char* paramName, const Vector3f& param)
	# bool SetPerBatchShaderParameters(const char* paramName, const float param)
	# bool SetPerBatchShaderParameters(const char* paramName, const int param)

	# void InitConstants()
	# bool InitializeShader(const char* vsFilename, const char* fsFilename)
	# void InitializeBuffers()
	# void CalculateCameraMatrix()
	# void CalculateLights()
	# void RenderBuffers()
}

class Allocator{
    + Allocator()
	+ Allocator(size_t data_size, size_t page_size, size_t alignment)

	+ void Reset(size_t data_size, size_t page_size, size_t alignment)
	+ void* Allocate()
    + void Free(void* p)
	+ void FreeAll()
}

IRuntimeModule <|.. MemoryManager
MemoryManager *--> Allocator
class MemoryManager{
    + virtual int Init()
	+ virtual void Update()
	+ virtual void Destroy()

	+ void* Allocate(size_t size)
	+ void* Allocate(size_t size, size_t alignment)
	+ void Free(void* p, size_t size)
}


IRuntimeModule <|.. AssetLoader
AssetLoader ..> Buffer
class MemoryManager{
    + virtual int Init()
	+ virtual void Update()
	+ virtual void Destroy()

}

ImageParse <|.. BmpParser
class BmpParser{
    virtual Image Parser(const Buffer& buffer)
}
ImageParse <|.. PngParser
class PngParser{
    virtual Image Parser(const Buffer& buffer)
}
ImageParse <|.. TgaParser
class TgaParser{
    virtual Image Parser(const Buffer& buffer)
}
ImageParse <|.. JepgParser
class JepgParser{
    virtual Image Parser(const Buffer& buffer)
}


BaseApplication <|-- WindowApplication
class WindowApplication{

}
BaseApplication <|-- LinuxApplication
class LinuxApplication{

}
WindowApplication <|-- OpenGLApplication
WindowApplication <|-- D3D12Appliacation

GraphicsManager <|-- D3D12GraphicsManager
D3D12GraphicsManager ..> SceneManager
class D3D12GraphicsManager{

}

GraphicsManager <|-- OpenGLGraphicsManager
OpenGLGraphicsManager ..> SceneManager
class OpenGLGraphicsManager{
    
}

GraphicsManager <|-- D2DGraphicsManager
class D2DGraphicsManager{
    
}

SceneParser ..> Scene
interface SceneParser{
	virtual Scene Parse(const std::string& buf)
}
SceneParser <|.. OgexParser 

class OgexParser{
	virtual Scene Parse(const std::string& buf)
}

class BaseSceneObject{
	# Guid m_guid
	# SceneObjectType m_type
}

BaseSceneObject <|-- SceneObjectMesh
BaseSceneObject <|-- SceneObjectTexture
BaseSceneObject <|-- SceneObjectMaterial
BaseSceneObject <|-- SceneObjectGeometry
BaseSceneObject <|-- SceneObjectLight
BaseSceneObject <|-- SceneObjectCamera

SceneObjectTexture ..> Image
SceneObjectTexture ..> ImageParse

SceneObjectCamera <|-- SceneobjectOrthgonalCamera
SceneObjectCamera <|-- SceneObjectPerspectiveCamera

SceneObjectLight <|-- SceneObjectSpotLight
SceneObjectLight <|-- SceneObjectOmniLight

SceneObjectTransform <|-- SceneObjectTranslation
SceneObjectTransform <|-- SceneObjectRotation
SceneObjectTransform <|-- SceneObjectScale

SceneObjectGeometry "1"-->"0..*" SceneObjectMesh
SceneObjectMesh "1"-->"0..*" SceneObjectIndexArray
SceneObjectMesh "1"-->"0..*" SceneObjectVertexArray


IRuntimeModule <|.. SceneManager
SceneManager -->Scene
SceneManager ..> OgexParser
class SceneManager{
	+ Scene LoadScene(string name)
	+ int LoadScene(const char* scene_file_name);

	+ const Scene& GetSceneForRendering();

	+ void ResetScene();

	+ bool IsSceneChanged();
	+ void NotifySceneIsRenderingQueued();

	# bool LoadOgexScene(string)

}
SceneManager --> BaseSceneNode
SceneManager ..> AssetLoader

Scene "1"-->"0..*"  BaseSceneNode
Scene "1"-->"0..*"  BaseSceneObject

class Scene{
	BaseSceneObject GetSceneObject()
	BaseSceneNode GetSceneNode()
} 




BaseSceneNode -->"1..*" BaseSceneNode
BaseSceneNode "1"-->"0..*" SceneObjectTransform

class BaseSceneNode{
	# string m_name
	# list<BaseSceneNode> m_child
	# list<SceneObjectTransform> m_Transform
	+ void AppendChild(BaseSceneNode node)
	+ void AppendChild(SceneObjectTransform transform)
}

BaseSceneNode <|-- SceneGeometryNode 
BaseSceneNode <|-- SceneLigthtNode
BaseSceneNode <|-- SceneCameraNode

@enduml