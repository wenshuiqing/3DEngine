@startuml


Main --> IApplication
Main --> SceneManager
Main --> MemoryManager
Main --> GraphicsManager
Main --> AssetLoader
class Main{

}


interface IRuntimeModule{
    + virtual int Init() = 0
	+ virtual void Destroy() = 0
	+ virtual void Update() = 0
}

IRuntimeModule <|.. IApplication
IApplication -- GfxConfiguration
interface IApplication{
    virtual int Init() = 0
	virtual void Destroy() = 0
	virtual void Update() = 0
	virtual bool IsQuit() = 0
    ==
	virtual GfxConfiguration& GetConfiguration() = 0
		
}

ImageParse ..> Buffer
ImageParse ..> Image
interface ImageParse{
    virtual Parser(const Buffer& buf)
}

IApplication <|.. BaseApplication

class BaseApplication{
    --construcor--
    + BaseApplication(GfxConfiguration& cfg)
    -- functions--
	+ virtual int Init()
	+ virtual void Destroy()
	+ virtual void Update()
	+ virtual bool IsQuit()
	+ inline GfxConfiguration& GetConfiguration()

	# virtual void OnDraw()
	# static bool m_bQuit
	# GfxConfiguration m_Config
}

IRuntimeModule <|.. GraphicsManager
class GraphicsManager{
    virtual int Init()
    virtual void Destroy()
    virtual void Update()

}

class Allocator{
    + Allocator()
	+ Allocator(size_t data_size, size_t page_size, size_t alignment)

	+ void Reset(size_t data_size, size_t page_size, size_t alignment)
	+ void* Allocate()
    + void Free(void* p)
	+ void FreeAll()
}

IRuntimeModule <|.. MemoryManager
MemoryManager *--> Allocator
class MemoryManager{
    + virtual int Init()
	+ virtual void Update()
	+ virtual void Destroy()

	+ void* Allocate(size_t size)
	+ void* Allocate(size_t size, size_t alignment)
	+ void Free(void* p, size_t size)
}


IRuntimeModule <|.. AssetLoader
AssetLoader ..> Buffer
class MemoryManager{
    + virtual int Init()
	+ virtual void Update()
	+ virtual void Destroy()

}

ImageParse <|.. BmpParser
class BmpParser{
    virtual Image Parser(const Buffer& buffer)
}


BaseApplication <|-- WindowApplication
class WindowApplication{

}
BaseApplication <|-- LinuxApplication
class LinuxApplication{

}
WindowApplication <|-- OpenGLApplication
WindowApplication <|-- D3D12Appliacation
D3D12Appliacation --> SceneManager
D3D12Appliacation --> MemoryManager
D3D12Appliacation --> GraphicsManager
D3D12Appliacation --> AssetLoader

OpenGLApplication --> SceneManager
OpenGLApplication --> MemoryManager
OpenGLApplication --> GraphicsManager
OpenGLApplication --> AssetLoader

GraphicsManager <|-- D3D12GraphicsManager
D3D12GraphicsManager ..> SceneManager
class D3D12GraphicsManager{

}

GraphicsManager <|-- OpenGLGraphicsManager
OpenGLGraphicsManager ..> SceneManager
class OpenGLGraphicsManager{
    
}

GraphicsManager <|-- D2DGraphicsManager
class D2DGraphicsManager{
    
}

SceneParser ..> Scene
interface SceneParser{
	virtual Scene Parse(const std::string& buf)
}
SceneParser <|.. OgexParser 
OgexParser "1"-->"0..*"BaseSceneObject
class OgexParser{
	virtual Scene Parse(const std::string& buf)
}

class BaseSceneObject{
	# Guid m_guid
	# SceneObjectType m_type
}

BaseSceneObject <|-- SceneObjectMesh
BaseSceneObject <|-- SceneObjectTexture
BaseSceneObject <|-- SceneObjectMaterial
BaseSceneObject <|-- SceneObjectGeometry
BaseSceneObject <|-- SceneObjectLight
BaseSceneObject <|-- SceneObjectCamera

SceneObjectCamera <|-- SceneobjectOrthgonalCamera
SceneObjectCamera <|-- SceneObjectPerspectiveCamera

SceneObjectLight <|-- SceneObjectSpotLight
SceneObjectLight <|-- SceneObjectOmniLight

SceneObjectTransform <|-- SceneObjectTranslation
SceneObjectTransform <|-- SceneObjectRotation
SceneObjectTransform <|-- SceneObjectScale

SceneObjectGeometry "1"-->"0..*" SceneObjectMesh

IRuntimeModule <|.. SceneManager
SceneManager ..>Scene
SceneManager ..> OgexParser
class SceneManager{
	Scene LoadScene(string name)
}
SceneManager --> BaseSceneNode
SceneManager ..> AssetLoader

Scene "1"-->"0..*"  BaseSceneNode
Scene "1"-->"0..*"  SceneObjectMesh
Scene "1"-->"0..*"  SceneObjectTexture
Scene "1"-->"0..*"  SceneObjectMaterial
Scene "1"-->"0..*"  SceneObjectGeometry
Scene "1"-->"0..*"  SceneObjectLight
Scene "1"-->"0..*"  SceneObjectCamera
class Scene{
	BaseSceneObject GetSceneObject()
} 




BaseSceneNode -->"1..*" BaseSceneNode
BaseSceneNode "1"-->"0..*" SceneObjectTransform

class BaseSceneNode{
	# string m_name
	# list<BaseSceneNode> m_child
	# list<SceneObjectTransform> m_Transform
	+ void AppendChild(BaseSceneNode node)
	+ void AppendChild(SceneObjectTransform transform)
}

BaseSceneNode <|-- SceneGeometryNode 
BaseSceneNode <|-- SceneLigthtNode
BaseSceneNode <|-- SceneCameraNode

@enduml